use ark_serialize::{CanonicalDeserialize, CanonicalSerialize, Compress, Validate};
use groth16_solana::{
    errors::Groth16Error,
    groth16::{Groth16Verifier, Groth16Verifyingkey},
};
use std::ops::Neg;
type G1 = ark_bn254::g1::G1Affine;

const VERIFYINGKEY: Groth16Verifyingkey = Groth16Verifyingkey {
    nr_pubinputs: 4,

    vk_alpha_g1: [
        45, 77, 154, 167, 227, 2, 217, 223, 65, 116, 157, 85, 7, 148, 157, 5, 219, 234, 51, 251,
        177, 108, 100, 59, 34, 245, 153, 162, 190, 109, 242, 226, 20, 190, 221, 80, 60, 55, 206,
        176, 97, 216, 236, 96, 32, 159, 227, 69, 206, 137, 131, 10, 25, 35, 3, 1, 240, 118, 202,
        255, 0, 77, 25, 38,
    ],

    vk_beta_g2: [
        9, 103, 3, 47, 203, 247, 118, 209, 175, 201, 133, 248, 136, 119, 241, 130, 211, 132, 128,
        166, 83, 242, 222, 202, 169, 121, 76, 188, 59, 243, 6, 12, 14, 24, 120, 71, 173, 76, 121,
        131, 116, 208, 214, 115, 43, 245, 1, 132, 125, 214, 139, 192, 224, 113, 36, 30, 2, 19, 188,
        127, 193, 61, 183, 171, 48, 76, 251, 209, 224, 138, 112, 74, 153, 245, 232, 71, 217, 63,
        140, 60, 170, 253, 222, 196, 107, 122, 13, 55, 157, 166, 154, 77, 17, 35, 70, 167, 23, 57,
        193, 177, 164, 87, 168, 199, 49, 49, 35, 210, 77, 47, 145, 146, 248, 150, 183, 198, 62,
        234, 5, 169, 213, 127, 6, 84, 122, 208, 206, 200,
    ],

    vk_gamme_g2: [
        25, 142, 147, 147, 146, 13, 72, 58, 114, 96, 191, 183, 49, 251, 93, 37, 241, 170, 73, 51,
        53, 169, 231, 18, 151, 228, 133, 183, 174, 243, 18, 194, 24, 0, 222, 239, 18, 31, 30, 118,
        66, 106, 0, 102, 94, 92, 68, 121, 103, 67, 34, 212, 247, 94, 218, 221, 70, 222, 189, 92,
        217, 146, 246, 237, 9, 6, 137, 208, 88, 95, 240, 117, 236, 158, 153, 173, 105, 12, 51, 149,
        188, 75, 49, 51, 112, 179, 142, 243, 85, 172, 218, 220, 209, 34, 151, 91, 18, 200, 94, 165,
        219, 140, 109, 235, 74, 171, 113, 128, 141, 203, 64, 143, 227, 209, 231, 105, 12, 67, 211,
        123, 76, 230, 204, 1, 102, 250, 125, 170,
    ],

    vk_delta_g2: [
        23, 183, 146, 249, 115, 75, 78, 80, 248, 56, 174, 64, 30, 45, 118, 122, 252, 177, 121, 26,
        232, 12, 6, 83, 228, 128, 233, 4, 105, 96, 147, 158, 16, 28, 186, 67, 174, 96, 96, 224, 24,
        76, 145, 112, 170, 252, 209, 160, 182, 31, 220, 177, 120, 244, 97, 59, 195, 48, 178, 229,
        106, 244, 153, 60, 13, 8, 167, 31, 95, 144, 191, 129, 219, 84, 92, 63, 187, 240, 147, 64,
        100, 77, 104, 189, 68, 13, 123, 197, 65, 251, 186, 193, 49, 69, 216, 8, 48, 19, 158, 3,
        203, 135, 131, 164, 7, 213, 114, 74, 88, 158, 122, 122, 238, 106, 224, 91, 157, 119, 49,
        49, 241, 160, 223, 227, 1, 211, 15, 67,
    ],

    vk_ic: &[
        [
            44, 190, 32, 242, 59, 18, 249, 53, 56, 144, 73, 53, 13, 142, 167, 131, 232, 217, 8,
            133, 111, 97, 87, 25, 206, 163, 63, 144, 222, 144, 238, 105, 31, 209, 192, 0, 65, 112,
            48, 152, 212, 44, 97, 134, 55, 108, 141, 55, 236, 48, 70, 92, 68, 173, 171, 241, 106,
            128, 15, 68, 73, 7, 56, 65,
        ],
        [
            26, 163, 34, 176, 186, 167, 99, 135, 228, 35, 169, 41, 10, 163, 235, 10, 208, 199, 132,
            135, 1, 229, 91, 109, 225, 44, 97, 135, 16, 251, 230, 184, 16, 16, 166, 161, 127, 68,
            199, 52, 81, 159, 75, 103, 253, 254, 178, 71, 65, 94, 125, 196, 144, 148, 38, 18, 70,
            248, 79, 91, 133, 109, 173, 150,
        ],
        [
            35, 5, 99, 33, 42, 218, 247, 109, 220, 238, 206, 224, 103, 40, 182, 0, 69, 158, 154,
            55, 83, 33, 30, 54, 48, 49, 244, 26, 118, 23, 97, 135, 26, 28, 133, 164, 216, 82, 219,
            104, 168, 116, 86, 157, 46, 66, 108, 63, 238, 92, 115, 114, 20, 252, 58, 102, 246, 127,
            205, 218, 183, 27, 167, 36,
        ],
        [
            8, 47, 247, 83, 94, 3, 6, 188, 147, 254, 225, 139, 71, 18, 227, 22, 104, 255, 73, 196,
            8, 86, 97, 207, 188, 6, 114, 65, 96, 123, 204, 213, 47, 240, 127, 20, 211, 131, 226,
            194, 15, 76, 150, 82, 142, 62, 89, 122, 127, 56, 32, 218, 145, 64, 40, 220, 72, 226,
            12, 184, 62, 87, 87, 198,
        ],
    ],
};

fn chunk_instruction_data(data: &[u8]) -> Vec<[u8; 32]> {
    data.chunks(32)
        .map(|chunk| {
            let mut array = [0u8; 32];
            array[..chunk.len()].copy_from_slice(chunk);
            array
        })
        .collect()
}

fn change_endianness(bytes: &[u8]) -> Vec<u8> {
    let mut vec = Vec::new();
    for b in bytes.chunks(32) {
        for byte in b.iter().rev() {
            vec.push(*byte);
        }
    }
    vec
}

pub fn verify_proof(data: &[u8]) -> Result<bool, Groth16Error> {
    let proof_a: G1 = G1::deserialize_with_mode(
        &*[&change_endianness(&data[0..64]), &[0u8][..]].concat(),
        Compress::No,
        Validate::Yes,
    )
    .map_err(|_| Groth16Error::DecompressingG1Failed)?;
    let mut proof_a_neg = [0u8; 65];
    proof_a
        .neg()
        .x
        .serialize_with_mode(&mut proof_a_neg[..32], Compress::No)
        .map_err(|_| Groth16Error::DecompressingG1Failed)?;
    proof_a
        .neg()
        .y
        .serialize_with_mode(&mut proof_a_neg[32..], Compress::No)
        .map_err(|_| Groth16Error::DecompressingG1Failed)?;

    let proof_a: [u8; 64] = change_endianness(&proof_a_neg[..64])
        .try_into()
        .map_err(|_| Groth16Error::InvalidG1Length)?;
    let proof_b = &data[64..192]
        .try_into()
        .map_err(|_| Groth16Error::InvalidG2Length)?;
    let proof_c = &data[192..256]
        .try_into()
        .map_err(|_| Groth16Error::InvalidG1Length)?;
    let public_signals: [[u8; 32]; 1] = chunk_instruction_data(&data[256..])
        .try_into()
        .map_err(|_| Groth16Error::InvalidPublicInputsLength)?;

    let mut verifier =
        Groth16Verifier::new(&proof_a, proof_b, proof_c, &public_signals, &VERIFYINGKEY)
            .map_err(|_| Groth16Error::ProofVerificationFailed)?;

    verifier.verify()
}
